export interface Input<T,E=Error> {
	placeholder: { renderBody: Marko.Body<[Awaited<unknown>]>; [Symbol.iterator]: any }
	then: Marko.AttrTag<{ renderBody: Marko.Body<[Awaited<T>]> }>
	catch: Marko.AttrTag<{ renderBody: Marko.Body<[Awaited<E>]> }>
	from: Promise<T>
}

static const LOADING = 0
static const RESOLVED = 1
static const REJECTED = 2

class {
	state = { settled: LOADING, value: <T | E | undefined>undefined}
	onCreate(input: Input<T,E>) {
		this.onInput(input)
	}
	onInput(input: Input<T,E>) {
		var state = this.state
		input.from.then(
			function(value) {
				state.settled = RESOLVED
				state.value = value
			},
			function(value) {
				state.settled = REJECTED
				state.value = value
			}
		)
	}
}
// https://discord.com/channels/725013179465203793/725013179926708226/1095341406060556390
// https://gist.github.com/DylanPiercey/9d65759ffa4ff7752a2bc8aa74f5da40
// Is this ok?
if(!isNaN(state.settled))
	$ const renderer = (
		state.settled === RESOLVED
			? input.then
			: state.settled === REJECTED
			? input.catch
			: input.placeholder
	)
	// @ts-expect-error
	// debugger: add a breakpoint
	$ renderer.renderBody((out), state.value)